// TODO: Remove, just for integer modulus
#extension GL_EXT_gpu_shader4 : enable
#extension GL_ARB_shader_storage_buffer_object : require
#extension GL_ARB_uniform_buffer_object : enable
#extension GL_NV_uniform_buffer_std430_layout : enable

// Use uniform buffer array to avoid the following error:
// cannot locate suitable resource to bind variable "@TMP494". Possibly large array
const int table_size = 360;

#define USE_BUFFER
#define USE_SSBO

#ifdef USE_BUFFER

#ifdef USE_SSBO

layout (std430, binding = 1) readonly buffer TablesBuffer {
    vec4 reach_gamut_table[table_size];
    vec4 gamut_cusp_table[table_size];
    float reach_cusp_table[table_size];
    float upperHullGammaTable[table_size];
} tablesBuffer;

#else

layout (std430, binding = 1) uniform TablesBuffer {
    vec4 reach_gamut_table[table_size];
    vec4 gamut_cusp_table[table_size];
    float reach_cusp_table[table_size];
    float upperHullGammaTable[table_size];
} tablesBuffer;

#endif

#else

const vec3 reach_gamut_table[table_size] = vec3[](
    vec3(61.305149078,   110.200607300,  0.589132547),
    vec3(61.069541931,   110.560317993,  1.250327468),
    vec3(60.831947327,   110.927497864,  1.933977604),
    vec3(60.592247009,   111.302169800,  2.642500639),
    vec3(60.350311279,   111.684486389,  3.378833294),
    vec3(60.106014252,   112.074653625,  4.146397591),
    vec3(59.859191895,   112.472969055,  4.949370384),
    vec3(59.609634399,   112.879646301,  5.792886257),
    vec3(59.357131958,   113.295120239,  6.683235645),
    vec3(59.101390839,   113.719932556,  7.628522396),
    vec3(58.842052460,   114.154861450,  8.639014244),
    vec3(58.578659058,   114.601043701,  9.728570938),
    vec3(58.310569763,   115.060455322,  10.916190147),
    vec3(58.036922455,   115.535995483,  12.229009628),
    vec3(57.756412506,   116.033157349,  13.708434105),
    vec3(57.466888428,   116.561874390,  15.422461510),
    vec3(57.164443970,   117.144104004,  17.497949600),
    vec3(56.840103149,   117.838592529,  20.227376938),
    vec3(56.459003448,   118.920532227,  24.752162933),
    vec3(57.342929840,   114.549949646,  26.089984894),
    vec3(58.202110291,   110.511100769,  27.453912735),
    vec3(59.038932800,   106.769920349,  28.844537735),
    vec3(59.855388641,   103.298217773,  30.262187958),
    vec3(60.653175354,   100.072288513,  31.706916809),
    vec3(61.433731079,   97.072029114,   33.178554535),
    vec3(62.198310852,   94.280143738,   34.676681519),
    vec3(62.948017120,   91.681701660,   36.200649261),
    vec3(63.683849335,   89.263771057,   37.749542236),
    vec3(64.406646729,   87.014839172,   39.322292328),
    vec3(65.117179871,   84.924812317,   40.917491913),
    vec3(65.816139221,   82.984687805,   42.533596039),
    vec3(66.504150391,   81.186225891,   44.168838501),
    vec3(67.181770325,   79.522155762,   45.821159363),
    vec3(67.849525452,   77.985641479,   47.488487244),
    vec3(68.507865906,   76.570564270,   49.168380737),
    vec3(69.157234192,   75.271003723,   50.858467102),
    vec3(69.798034668,   74.081733704,   52.556011200),
    vec3(70.430603027,   72.997596741,   54.258358002),
    vec3(71.055305481,   72.013816833,   55.962730408),
    vec3(71.672447205,   71.125823975,   57.666316986),
    vec3(72.282302856,   70.329261780,   59.366222382),
    vec3(72.885147095,   69.619911194,   61.059692383),
    vec3(73.481254578,   68.993652344,   62.744045258),
    vec3(74.070846558,   68.446708679,   64.416419983),
    vec3(74.654136658,   67.975143433,   66.074478149),
    vec3(75.231369019,   67.575363159,   67.715599060),
    vec3(75.802703857,   67.243812561,   69.337493896),
    vec3(76.368331909,   66.976936340,   70.938186646),
    vec3(76.928443909,   66.771461487,   72.515586853),
    vec3(77.483200073,   66.624061584,   74.068000793),
    vec3(78.032768250,   66.531646729,   75.593856812),
    vec3(78.577270508,   66.491111755,   77.091812134),
    vec3(79.116882324,   66.499572754,   78.560592651),
    vec3(79.651710510,   66.554138184,   79.999359131),
    vec3(80.181877136,   66.652130127,   81.407196045),
    vec3(80.707534790,   66.790885925,   82.783523560),
    vec3(81.228790283,   66.967933655,   84.127922058),
    vec3(81.745750427,   67.180847168,   85.440086365),
    vec3(82.258522034,   67.427375793,   86.719879150),
    vec3(82.767204285,   67.705299377,   87.967193604),
    vec3(83.271903992,   68.012573242,   89.182250977),
    vec3(83.772697449,   68.347190857,   90.365272522),
    vec3(84.269683838,   68.707305908,   91.516471863),
    vec3(84.762947083,   69.091140747,   92.636238098),
    vec3(85.252601624,   69.497047424,   93.725143433),
    vec3(85.738662720,   69.923408508,   94.783599854),
    vec3(86.221267700,   70.368751526,   95.812240601),
    vec3(86.700439453,   70.831672668,   96.811698914),
    vec3(87.176307678,   71.310836792,   97.782630920),
    vec3(87.648887634,   71.805000305,   98.725608826),
    vec3(88.118270874,   72.313003540,   99.641426086),
    vec3(88.584526062,   72.833801270,   100.530944824),
    vec3(89.047691345,   73.366264343,   101.394607544),
    vec3(89.507827759,   73.909507751,   102.233390808),
    vec3(89.965042114,   74.462615967,   103.047889709),
    vec3(90.419334412,   75.024703979,   103.838844299),
    vec3(90.870758057,   75.595001221,   104.607040405),
    vec3(91.319404602,   76.172798157,   105.353111267),
    vec3(91.765296936,   76.757385254,   106.077796936),
    vec3(91.501029968,   76.834884644,   106.792678833),
    vec3(91.235671997,   76.925399780,   107.510681152),
    vec3(90.969291687,   77.029136658,   108.231620789),
    vec3(90.701797485,   77.146339417,   108.955360413),
    vec3(90.433235168,   77.277099609,   109.681465149),
    vec3(90.163536072,   77.421768188,   110.409950256),
    vec3(89.892730713,   77.580444336,   111.140480042),
    vec3(89.620780945,   77.753395081,   111.872909546),
    vec3(89.347686768,   77.940803528,   112.606971741),
    vec3(89.073417664,   78.142860413,   113.342445374),
    vec3(88.797988892,   78.359756470,   114.079055786),
    vec3(88.521347046,   78.591682434,   114.816604614),
    vec3(88.243499756,   78.838813782,   115.554801941),
    vec3(87.964439392,   79.101463318,   116.293586731),
    vec3(87.684120178,   79.379676819,   117.032585144),
    vec3(87.402542114,   79.673675537,   117.771522522),
    vec3(87.119697571,   79.983680725,   118.510246277),
    vec3(86.835556030,   80.309867859,   119.248519897),
    vec3(86.550102234,   80.652366638,   119.986038208),
    vec3(86.263313293,   81.011390686,   120.722663879),
    vec3(85.975196838,   81.387077332,   121.458038330),
    vec3(85.685691833,   81.779685974,   122.192100525),
    vec3(85.394790649,   82.189338684,   122.924530029),
    vec3(85.102508545,   82.616157532,   123.655059814),
    vec3(84.808776855,   83.060386658,   124.383560181),
    vec3(84.513610840,   83.522102356,   125.109756470),
    vec3(84.216979980,   84.001487732,   125.833419800),
    vec3(83.918830872,   84.498870850,   126.554496765),
    vec3(83.619163513,   85.014221191,   127.272636414),
    vec3(83.317985535,   85.547775269,   127.987709045),
    vec3(83.015228271,   86.099609375,   128.699447632),
    vec3(82.710891724,   86.670066833,   129.407791138),
    vec3(82.404937744,   87.259109497,   130.112472534),
    vec3(82.097351074,   87.867050171,   130.813354492),
    vec3(81.788101196,   88.493988037,   131.510284424),
    vec3(81.477157593,   89.140075684,   132.203079224),
    vec3(81.164505005,   89.805450439,   132.891586304),
    vec3(80.850067139,   90.490440369,   133.575744629),
    vec3(80.533882141,   91.195098877,   134.255340576),
    vec3(80.215858459,   91.919471741,   134.930206299),
    vec3(79.896011353,   92.664031982,   135.600357056),
    vec3(79.574310303,   93.428710938,   136.265548706),
    vec3(79.250663757,   94.213813782,   136.925750732),
    vec3(78.925094604,   95.019531250,   137.580871582),
    vec3(78.597557068,   95.845893860,   138.230712891),
    vec3(78.267990112,   96.693351746,   138.875320435),
    vec3(77.936393738,   97.561988831,   139.514541626),
    vec3(77.602684021,   98.451950073,   140.148345947),
    vec3(77.266845703,   99.363647461,   140.776672363),
    vec3(76.928863525,   100.297134399,  141.399414062),
    vec3(76.588638306,   101.252685547,  142.016555786),
    vec3(76.246147156,   102.230590820,  142.628051758),
    vec3(75.901374817,   103.231063843,  143.233840942),
    vec3(75.554244995,   104.254455566,  143.833938599),
    vec3(75.204704285,   105.300971985,  144.428298950),
    vec3(74.852714539,   106.370918274,  145.016891479),
    vec3(74.498237610,   107.464530945,  145.599670410),
    vec3(74.141181946,   108.582298279,  146.176712036),
    vec3(73.781509399,   109.724388123,  146.747940063),
    vec3(73.419158936,   110.891258240,  147.313400269),
    vec3(73.649299622,   106.969070435,  148.805145264),
    vec3(73.866546631,   103.786514282,  150.122924805),
    vec3(74.075332642,   101.083549500,  151.328567505),
    vec3(74.277969360,   98.722999573,   152.454635620),
    vec3(74.475875854,   96.622222900,   153.520767212),
    vec3(74.669982910,   94.727371216,   154.539855957),
    vec3(74.860916138,   93.000610352,   155.520782471),
    vec3(75.049140930,   91.414688110,   156.470062256),
    vec3(75.235023499,   89.948593140,   157.392471313),
    vec3(75.418830872,   88.586433411,   158.291809082),
    vec3(75.600776672,   87.315330505,   159.171035767),
    vec3(75.781051636,   86.125022888,   160.032485962),
    vec3(75.959800720,   85.006950378,   160.878097534),
    vec3(76.137153625,   83.954040527,   161.709442139),
    vec3(76.313179016,   82.960304260,   162.527832031),
    vec3(76.487991333,   82.020507812,   163.334396362),
    vec3(76.661666870,   81.130378723,   164.130035400),
    vec3(76.834281921,   80.285850525,   164.915527344),
    vec3(77.005874634,   79.483818054,   165.691604614),
    vec3(77.176498413,   78.721199036,   166.458831787),
    vec3(77.346214294,   77.995239258,   167.217681885),
    vec3(77.515060425,   77.303810120,   167.968627930),
    vec3(77.683052063,   76.644660950,   168.712036133),
    vec3(77.850242615,   76.016044617,   169.448257446),
    vec3(78.016662598,   75.415992737,   170.177551270),
    vec3(78.182334900,   74.843093872,   170.900177002),
    vec3(78.347282410,   74.295936584,   171.616378784),
    vec3(78.511535645,   73.773193359,   172.326339722),
    vec3(78.675109863,   73.273658752,   173.030197144),
    vec3(78.838027954,   72.796157837,   173.728134155),
    vec3(79.000297546,   72.339759827,   174.420272827),
    vec3(79.161964417,   71.903572083,   175.106735229),
    vec3(79.323020935,   71.486495972,   175.787612915),
    vec3(79.483474731,   71.087852478,   176.462982178),
    vec3(79.643371582,   70.706916809,   177.132949829),
    vec3(79.802688599,   70.342811584,   177.797576904),
    vec3(79.961456299,   69.995109558,   178.456924438),
    vec3(80.119674683,   69.663017273,   179.111007690),
    vec3(80.277397156,   69.345825195,   179.759933472),
    vec3(80.434577942,   69.043235779,   180.403717041),
    vec3(80.591262817,   68.754516602,   181.042373657),
    vec3(80.747436523,   68.479232788,   181.675933838),
    vec3(80.903129578,   68.216911316,   182.304458618),
    vec3(81.058326721,   67.967048645,   182.927947998),
    vec3(81.213050842,   67.729293823,   183.546463013),
    vec3(81.367317200,   67.503265381,   184.159912109),
    vec3(81.521141052,   67.288414001,   184.768463135),
    vec3(81.674491882,   67.084480286,   185.372039795),
    vec3(81.827415466,   66.891105652,   185.970672607),
    vec3(81.979904175,   66.707931519,   186.564376831),
    vec3(82.131935120,   66.534736633,   187.153182983),
    vec3(82.283576965,   66.370903015,   187.737121582),
    vec3(82.434768677,   66.216476440,   188.316116333),
    vec3(82.585556030,   66.070991516,   188.890258789),
    vec3(82.735939026,   65.934242249,   189.459518433),
    vec3(82.885917664,   65.805953979,   190.023956299),
    vec3(83.035484314,   65.685928345,   190.583526611),
    vec3(83.184669495,   65.573654175,   191.138275146),
    vec3(83.333465576,   65.469230652,   191.688247681),
    vec3(83.481880188,   65.372283936,   192.233352661),
    vec3(82.982315063,   64.847549438,   192.783157349),
    vec3(82.479080200,   64.324157715,   193.346740723),
    vec3(81.972129822,   63.801822662,   193.924667358),
    vec3(81.461380005,   63.281200409,   194.517364502),
    vec3(80.946769714,   62.762287140,   195.125350952),
    vec3(80.428215027,   62.245277405,   195.749160767),
    vec3(79.905593872,   61.730491638,   196.389404297),
    vec3(79.378852844,   61.218242645,   197.046493530),
    vec3(78.847885132,   60.708744049,   197.721160889),
    vec3(78.312583923,   60.202392578,   198.413940430),
    vec3(77.772865295,   59.699470520,   199.125457764),
    vec3(77.228607178,   59.200222015,   199.856384277),
    vec3(76.679733276,   58.705223083,   200.607315063),
    vec3(76.126113892,   58.214775085,   201.378982544),
    vec3(75.567596436,   57.729236603,   202.172119141),
    vec3(75.004135132,   57.249252319,   202.987319946),
    vec3(74.435546875,   56.775093079,   203.825454712),
    vec3(73.861701965,   56.307338715,   204.687225342),
    vec3(73.282493591,   55.846698761,   205.573318481),
    vec3(72.697715759,   55.393680573,   206.484573364),
    vec3(72.107299805,   54.948814392,   207.421783447),
    vec3(71.511039734,   54.512866974,   208.385726929),
    vec3(70.908767700,   54.086467743,   209.377258301),
    vec3(70.300331116,   53.670566559,   210.397018433),
    vec3(69.685546875,   53.265789032,   211.445938110),
    vec3(69.064201355,   52.873104095,   212.524765015),
    vec3(68.436119080,   52.493389130,   213.634292603),
    vec3(67.801078796,   52.127624512,   214.775268555),
    vec3(67.158851624,   51.776828766,   215.948425293),
    vec3(66.509231567,   51.442230225,   217.154418945),
    vec3(65.851936340,   51.124858856,   218.393981934),
    vec3(65.186744690,   50.826034546,   219.667678833),
    vec3(64.513374329,   50.547050476,   220.976058960),
    vec3(63.831489563,   50.289226532,   222.319763184),
    vec3(63.140838623,   50.054145813,   223.699020386),
    vec3(62.441051483,   49.843379974,   225.114181519),
    vec3(61.731807709,   49.658470154,   226.565567017),
    vec3(61.012763977,   49.501197815,   228.053253174),
    vec3(60.283447266,   49.373378754,   229.577331543),
    vec3(59.543495178,   49.277004242,   231.137557983),
    vec3(58.792449951,   49.214027405,   232.733886719),
    vec3(58.029788971,   49.186592102,   234.365814209),
    vec3(57.255043030,   49.196987152,   236.032821655),
    vec3(56.467605591,   49.247573853,   237.734359741),
    vec3(55.666931152,   49.340816498,   239.469543457),
    vec3(54.852329254,   49.479408264,   241.237426758),
    vec3(54.023067474,   49.666049957,   243.037124634),
    vec3(53.178405762,   49.903766632,   244.867279053),
    vec3(52.317501068,   50.195655823,   246.726715088),
    vec3(51.439430237,   50.545021057,   248.614227295),
    vec3(50.543201447,   50.955459595,   250.528213501),
    vec3(49.627677917,   51.430847168,   252.467468262),
    vec3(48.691638947,   51.975299835,   254.430633545),
    vec3(47.733737946,   52.593410492,   256.416381836),
    vec3(46.752407074,   53.290210724,   258.423767090),
    vec3(45.746006012,   54.071220398,   260.451904297),
    vec3(44.712558746,   54.942783356,   262.500152588),
    vec3(43.649944305,   55.911975861,   264.568359375),
    vec3(42.555637360,   56.987064362,   266.656860352),
    vec3(41.426750183,   58.177715302,   268.766967773),
    vec3(42.135147095,   57.533348083,   271.816040039),
    vec3(42.826583862,   57.061004639,   274.804809570),
    vec3(43.502243042,   56.746055603,   277.723327637),
    vec3(44.163135529,   56.574611664,   280.563079834),
    vec3(44.810253143,   56.533618927,   283.317230225),
    vec3(45.444385529,   56.610755920,   285.980438232),
    vec3(46.066329956,   56.794525146,   288.548889160),
    vec3(46.676757812,   57.074165344,   291.020202637),
    vec3(47.276287079,   57.439762115,   293.393310547),
    vec3(47.865489960,   57.882076263,   295.668212891),
    vec3(48.444896698,   58.392776489,   297.846069336),
    vec3(49.014965057,   58.963993073,   299.928436279),
    vec3(49.576156616,   59.588836670,   301.917999268),
    vec3(50.128864288,   60.260887146,   303.817596436),
    vec3(50.673450470,   60.974330902,   305.630340576),
    vec3(51.210296631,   61.724048615,   307.359924316),
    vec3(51.739681244,   62.505317688,   309.009918213),
    vec3(52.261932373,   63.313934326,   310.584014893),
    vec3(52.777336121,   64.146171570,   312.085968018),
    vec3(53.286148071,   64.998634338,   313.519409180),
    vec3(53.788627625,   65.868354797,   314.888000488),
    vec3(54.284961700,   66.752586365,   316.195129395),
    vec3(54.775405884,   67.648994446,   317.444152832),
    vec3(55.260162354,   68.555412292,   318.638275146),
    vec3(55.739402771,   69.469985962,   319.780578613),
    vec3(56.213344574,   70.391021729,   320.873962402),
    vec3(56.682117462,   71.317024231,   321.921142578),
    vec3(57.145912170,   72.246627808,   322.924682617),
    vec3(57.604892731,   73.178710938,   323.887054443),
    vec3(58.059150696,   74.112182617,   324.810546875),
    vec3(58.508892059,   75.046142578,   325.697296143),
    vec3(58.954196930,   75.979766846,   326.549346924),
    vec3(59.395229340,   76.912307739,   327.368621826),
    vec3(59.832077026,   77.843162537,   328.156829834),
    vec3(60.264892578,   78.771774292,   328.915740967),
    vec3(60.693733215,   79.697616577,   329.646820068),
    vec3(61.118759155,   80.620300293,   330.351593018),
    vec3(61.540019989,   81.539367676,   331.031402588),
    vec3(61.957645416,   82.454582214,   331.687561035),
    vec3(62.371719360,   83.365516663,   332.321289062),
    vec3(62.782318115,   84.272018433,   332.933654785),
    vec3(63.189529419,   85.173919678,   333.525787354),
    vec3(63.593441010,   86.070907593,   334.098663330),
    vec3(63.994121552,   86.962860107,   334.653198242),
    vec3(64.391654968,   87.849693298,   335.190307617),
    vec3(64.786094666,   88.731277466,   335.710815430),
    vec3(65.177543640,   89.607498169,   336.215515137),
    vec3(65.566024780,   90.478271484,   336.705078125),
    vec3(65.951629639,   91.343475342,   337.180206299),
    vec3(66.334434509,   92.203216553,   337.641632080),
    vec3(66.714454651,   93.057403564,   338.089874268),
    vec3(67.091773987,   93.905876160,   338.525543213),
    vec3(67.466445923,   94.748771667,   338.949188232),
    vec3(67.838516235,   95.586059570,   339.361328125),
    vec3(68.208045959,   96.417678833,   339.762451172),
    vec3(68.575088501,   97.243698120,   340.153015137),
    vec3(68.939682007,   98.064193726,   340.533447266),
    vec3(69.301864624,   98.878936768,   340.904113770),
    vec3(69.661727905,   99.688285828,   341.265533447),
    vec3(70.019241333,   100.492012024,  341.617950439),
    vec3(69.831291199,   100.624732971,  341.966674805),
    vec3(69.642601013,   100.761245728,  342.318481445),
    vec3(69.453155518,   100.901580811,  342.673461914),
    vec3(69.262939453,   101.045928955,  343.031677246),
    vec3(69.071945190,   101.194267273,  343.393218994),
    vec3(68.880149841,   101.346679688,  343.758178711),
    vec3(68.687568665,   101.503273010,  344.126586914),
    vec3(68.494178772,   101.664085388,  344.498565674),
    vec3(68.299949646,   101.829200745,  344.874206543),
    vec3(68.104881287,   101.998580933,  345.253601074),
    vec3(67.908958435,   102.172386169,  345.636871338),
    vec3(67.712181091,   102.350822449,  346.024108887),
    vec3(67.514511108,   102.533821106,  346.415435791),
    vec3(67.315956116,   102.721374512,  346.810974121),
    vec3(67.116477966,   102.913703918,  347.210876465),
    vec3(66.916091919,   103.110847473,  347.615264893),
    vec3(66.714744568,   103.312866211,  348.024291992),
    vec3(66.512428284,   103.519844055,  348.438110352),
    vec3(66.309150696,   103.731910706,  348.856933594),
    vec3(66.104858398,   103.949012756,  349.280883789),
    vec3(65.899559021,   104.171401978,  349.710205078),
    vec3(65.693214417,   104.399055481,  350.145141602),
    vec3(65.485801697,   104.632034302,  350.585845947),
    vec3(65.277328491,   104.870597839,  351.032623291),
    vec3(65.067733765,   105.114654541,  351.485748291),
    vec3(64.857009888,   105.364257812,  351.945465088),
    vec3(64.645141602,   105.619735718,  352.412139893),
    vec3(64.432075500,   105.880958557,  352.886108398),
    vec3(64.217819214,   106.148132324,  353.367706299),
    vec3(64.002296448,   106.421234131,  353.857421875),
    vec3(63.785518646,   106.700439453,  354.355621338),
    vec3(63.567428589,   106.985855103,  354.862884521),
    vec3(63.347984314,   107.277465820,  355.379699707),
    vec3(63.127166748,   107.575538635,  355.906677246),
    vec3(62.904922485,   107.880104065,  356.444519043),
    vec3(62.681217194,   108.191123962,  356.993957520),
    vec3(62.455986023,   108.508865356,  357.555816650),
    vec3(62.229198456,   108.833305359,  358.131042480),
    vec3(62.000774384,   109.164611816,  358.720733643),
    vec3(61.770690918,   109.502883911,  359.326019287),
    vec3(61.538814545,   109.848114014,  359.948303223)
);

const float reach_cusp_table[table_size] = float[](
    166.786010742,
    168.475524902,
    170.134735107,
    171.758605957,
    173.341949463,
    174.879943848,
    176.368621826,
    177.804473877,
    179.184631348,
    180.506225586,
    181.768371582,
    182.969940186,
    184.110595703,
    185.191345215,
    186.213409424,
    187.178802490,
    188.089660645,
    188.949676514,
    189.761779785,
    190.530303955,
    191.259277344,
    191.953277588,
    192.617034912,
    193.255340576,
    193.873504639,
    194.360931396,
    187.093444824,
    180.407333374,
    174.237396240,
    168.528076172,
    163.231277466,
    158.306030273,
    153.716186523,
    149.430572510,
    145.421600342,
    141.664978027,
    138.139343262,
    134.825622559,
    131.707000732,
    128.768066406,
    125.995544434,
    123.376937866,
    120.901397705,
    118.558975220,
    116.340545654,
    114.238067627,
    112.243942261,
    110.351562500,
    108.554550171,
    106.847290039,
    105.224609375,
    103.681755066,
    102.214241028,
    100.818061829,
    99.489501953,
    98.225212097,
    97.021774292,
    95.876502991,
    94.786544800,
    93.749328613,
    92.762664795,
    91.824249268,
    90.932083130,
    90.084365845,
    89.279266357,
    88.515182495,
    87.790588379,
    87.104225159,
    86.454582214,
    85.840606689,
    85.261154175,
    84.715080261,
    84.201431274,
    83.719444275,
    83.268165588,
    82.846832275,
    82.454772949,
    82.091232300,
    81.755828857,
    81.447891235,
    81.166839600,
    80.912307739,
    80.683990479,
    80.481338501,
    80.304145813,
    80.152130127,
    80.025009155,
    79.922676086,
    79.844856262,
    79.791549683,
    79.762557983,
    79.757881165,
    79.777618408,
    79.821586609,
    79.890060425,
    79.983047485,
    80.100631714,
    80.243110657,
    80.410675049,
    80.603500366,
    80.821990967,
    81.066421509,
    81.337265015,
    81.634902954,
    81.959724426,
    82.312393188,
    82.693389893,
    83.103370667,
    83.543106079,
    84.013175964,
    84.514526367,
    85.048004150,
    85.614486694,
    86.215118408,
    86.850830078,
    87.522796631,
    88.232513428,
    88.981056213,
    89.770034790,
    90.601058960,
    91.475769043,
    92.395973206,
    93.363571167,
    94.380760193,
    95.449829102,
    96.573165894,
    97.753433228,
    98.993492126,
    100.296310425,
    101.665405273,
    103.104209900,
    104.616737366,
    106.207183838,
    107.880111694,
    109.640594482,
    111.494155884,
    113.446617126,
    115.504547119,
    117.675109863,
    119.966217041,
    122.386360168,
    124.945068359,
    127.652931213,
    130.521392822,
    133.563613892,
    136.793792725,
    140.227935791,
    143.884185791,
    141.689300537,
    138.112060547,
    134.729858398,
    131.528854370,
    128.496826172,
    125.621986389,
    122.894096375,
    120.303634644,
    117.842010498,
    115.501022339,
    113.273712158,
    111.152938843,
    109.132957458,
    107.207778931,
    105.372146606,
    103.621292114,
    101.950164795,
    100.355148315,
    98.832321167,
    97.377685547,
    95.988174438,
    94.660476685,
    93.391609192,
    92.178817749,
    91.019912720,
    89.912033081,
    88.853363037,
    87.841415405,
    86.874580383,
    85.950851440,
    85.068511963,
    84.226135254,
    83.421798706,
    82.654663086,
    81.922912598,
    81.225776672,
    80.561637878,
    79.929824829,
    79.328918457,
    78.758239746,
    78.216842651,
    77.703948975,
    77.218437195,
    76.760009766,
    76.327804565,
    75.921249390,
    75.539489746,
    75.182250977,
    74.849029541,
    74.539276123,
    74.252410889,
    73.988342285,
    73.746299744,
    73.526382446,
    73.328018188,
    73.151107788,
    72.995285034,
    72.860336304,
    72.746086121,
    72.652343750,
    72.579193115,
    72.526260376,
    72.493652344,
    72.481246948,
    72.488975525,
    72.516921997,
    72.565269470,
    72.633743286,
    72.722625732,
    72.832015991,
    72.962097168,
    73.112869263,
    73.284622192,
    73.477745056,
    73.692131042,
    73.928359985,
    74.186614990,
    74.467178345,
    74.770645142,
    75.097274780,
    75.447463989,
    75.821685791,
    76.220703125,
    76.644706726,
    77.094558716,
    77.570816040,
    78.074264526,
    78.605461121,
    79.165267944,
    79.754447937,
    80.374053955,
    81.024841309,
    81.708145142,
    82.424636841,
    83.175567627,
    83.962440491,
    84.786132812,
    85.648345947,
    86.550331116,
    87.493606567,
    88.480087280,
    89.511398315,
    90.589141846,
    91.715713501,
    92.892929077,
    94.123367310,
    95.409011841,
    96.752838135,
    98.157028198,
    99.624923706,
    101.159378052,
    102.763748169,
    104.441452026,
    106.196304321,
    108.032318115,
    109.953399658,
    111.964706421,
    114.070037842,
    116.275497437,
    118.586158752,
    121.007537842,
    120.932579041,
    119.938369751,
    118.991378784,
    118.090248108,
    117.233367920,
    116.419509888,
    115.647315979,
    114.915657043,
    114.223289490,
    113.569259644,
    112.952613831,
    112.372299194,
    111.827560425,
    111.317634583,
    110.841751099,
    110.399246216,
    109.989356995,
    109.611701965,
    109.265518188,
    108.950424194,
    108.665939331,
    108.411697388,
    108.187194824,
    107.992362976,
    107.826522827,
    107.689575195,
    107.581420898,
    107.501602173,
    107.450195312,
    107.426742554,
    107.431602478,
    107.464309692,
    107.524963379,
    107.613563538,
    107.730102539,
    107.874588013,
    108.047103882,
    108.247848511,
    108.476829529,
    108.734222412,
    109.020141602,
    109.334945679,
    109.678741455,
    110.051818848,
    110.454368591,
    110.886856079,
    111.349578857,
    111.842727661,
    112.366775513,
    112.922096252,
    113.509178162,
    114.128204346,
    114.779853821,
    115.464492798,
    116.182617188,
    116.934677124,
    117.721084595,
    118.542480469,
    119.399261475,
    120.291900635,
    121.220970154,
    122.186752319,
    123.189834595,
    124.230484009,
    125.309371948,
    126.426506042,
    127.582168579,
    128.776885986,
    130.010406494,
    131.282989502,
    132.594482422,
    133.944702148,
    135.333343506,
    136.759674072,
    138.223266602,
    139.722930908,
    141.257812500,
    142.826263428,
    144.426818848,
    146.057312012,
    147.715576172,
    149.398986816,
    151.104553223,
    152.828887939,
    154.568298340,
    156.318756104,
    158.075714111,
    159.834564209,
    161.590393066,
    163.337890625,
    165.071594238
);

const vec3 gamut_cusp_table[table_size] = vec3[](
    vec3(54.047630310,   68.745735168,   0.730295599),
    vec3(53.769119263,   68.940780640,   1.756810427),
    vec3(53.488082886,   69.149490356,   2.824278355),
    vec3(53.204418182,   69.372978210,   3.937412500),
    vec3(52.917934418,   69.612792969,   5.101802826),
    vec3(52.628475189,   69.870605469,   6.324174881),
    vec3(52.335815430,   70.148681641,   7.612997055),
    vec3(52.039730072,   70.449775696,   8.978574753),
    vec3(51.739894867,   70.777717590,   10.434355736),
    vec3(51.435894012,   71.137512207,   11.997890472),
    vec3(51.127235413,   71.536254883,   13.692704201),
    vec3(50.813179016,   71.984367371,   15.551944733),
    vec3(50.492710114,   72.497871399,   17.624137878),
    vec3(50.164211273,   73.103637695,   19.986000061),
    vec3(49.824951172,   73.851257324,   22.770713806),
    vec3(49.469287872,   74.849685669,   26.250974655),
    vec3(50.558929443,   71.686218262,   27.875953674),
    vec3(51.616607666,   68.821960449,   29.532133102),
    vec3(52.645259857,   66.221748352,   31.218597412),
    vec3(53.647361755,   63.856716156,   32.934112549),
    vec3(54.625034332,   61.702720642,   34.677093506),
    vec3(55.580097198,   59.739597321,   36.445552826),
    vec3(56.514156342,   57.950191498,   38.237129211),
    vec3(57.428596497,   56.319618225,   40.049255371),
    vec3(58.324668884,   54.835147858,   41.878917694),
    vec3(59.203468323,   53.485397339,   43.723041534),
    vec3(60.066020966,   52.260520935,   45.578136444),
    vec3(60.913173676,   51.151489258,   47.440742493),
    vec3(61.745788574,   50.150310516,   49.307136536),
    vec3(62.564563751,   49.249748230,   51.173496246),
    vec3(63.370204926,   48.442993164,   53.036243439),
    vec3(64.163299561,   47.724033356,   54.891384125),
    vec3(64.944450378,   47.087097168,   56.735374451),
    vec3(65.714172363,   46.526885986,   58.564723969),
    vec3(66.472938538,   46.038463593,   60.375930786),
    vec3(67.221221924,   45.617225647,   62.165733337),
    vec3(67.959419250,   45.258773804,   63.931232452),
    vec3(68.687942505,   44.958976746,   65.669723511),
    vec3(69.407142639,   44.713939667,   67.378753662),
    vec3(70.117362976,   44.519996643,   69.056190491),
    vec3(70.818946838,   44.373718262,   70.700080872),
    vec3(71.512176514,   44.271789551,   72.308883667),
    vec3(72.197334290,   44.211120605,   73.881317139),
    vec3(72.874702454,   44.188835144,   75.416252136),
    vec3(73.544517517,   44.202144623,   76.912994385),
    vec3(74.207031250,   44.248477936,   78.371025085),
    vec3(74.862464905,   44.325386047,   79.790092468),
    vec3(75.511047363,   44.430625916,   81.169982910),
    vec3(76.152954102,   44.562038422,   82.510726929),
    vec3(76.788414001,   44.717620850,   83.812690735),
    vec3(77.417587280,   44.895488739,   85.076217651),
    vec3(78.040649414,   45.093887329,   86.301872253),
    vec3(78.657791138,   45.311176300,   87.490165710),
    vec3(79.269142151,   45.545856476,   88.641784668),
    vec3(79.874862671,   45.796470642,   89.757736206),
    vec3(80.475120544,   46.061725616,   90.838623047),
    vec3(81.070030212,   46.340377808,   91.885574341),
    vec3(81.659744263,   46.631263733,   92.899299622),
    vec3(82.244369507,   46.933364868,   93.880744934),
    vec3(82.824043274,   47.245651245,   94.831039429),
    vec3(83.398887634,   47.567241669,   95.751022339),
    vec3(83.969017029,   47.897296906,   96.641769409),
    vec3(84.534523010,   48.234992981,   97.504150391),
    vec3(85.095512390,   48.579627991,   98.339271545),
    vec3(85.652091980,   48.930519104,   99.147895813),
    vec3(86.204376221,   49.287059784,   99.930999756),
    vec3(86.752441406,   49.648674011,   100.689590454),
    vec3(87.296371460,   50.014816284,   101.424507141),
    vec3(87.836250305,   50.384975433,   102.136528015),
    vec3(88.372192383,   50.758735657,   102.826507568),
    vec3(88.904251099,   51.135673523,   103.495437622),
    vec3(89.432540894,   51.515369415,   104.143890381),
    vec3(89.957069397,   51.897460938,   104.772697449),
    vec3(90.477958679,   52.281658173,   105.382659912),
    vec3(90.995277405,   52.667629242,   105.974411011),
    vec3(91.509086609,   53.055107117,   106.548690796),
    vec3(91.314430237,   53.091365814,   107.114906311),
    vec3(91.119232178,   53.133159637,   107.682998657),
    vec3(90.923507690,   53.180667877,   108.253082275),
    vec3(90.727210999,   53.233913422,   108.824989319),
    vec3(90.530387878,   53.292976379,   109.398651123),
    vec3(90.332984924,   53.357868195,   109.973793030),
    vec3(90.135040283,   53.428810120,   110.550621033),
    vec3(89.936515808,   53.505691528,   111.128692627),
    vec3(89.737434387,   53.588672638,   111.708038330),
    vec3(89.537773132,   53.677799225,   112.288551331),
    vec3(89.337524414,   53.773181915,   112.870170593),
    vec3(89.136703491,   53.874858856,   113.452758789),
    vec3(88.935287476,   53.982852936,   114.036048889),
    vec3(88.733276367,   54.097328186,   114.620208740),
    vec3(88.530654907,   54.218235016,   115.204826355),
    vec3(88.327438354,   54.345703125,   115.789901733),
    vec3(88.123603821,   54.479766846,   116.375320435),
    vec3(87.919166565,   54.620498657,   116.960960388),
    vec3(87.714096069,   54.767982483,   117.546737671),
    vec3(87.508392334,   54.922248840,   118.132492065),
    vec3(87.302078247,   55.083362579,   118.718078613),
    vec3(87.095085144,   55.251354218,   119.303375244),
    vec3(86.887481689,   55.426353455,   119.888366699),
    vec3(86.679206848,   55.608360291,   120.472831726),
    vec3(86.470283508,   55.797470093,   121.056686401),
    vec3(86.260696411,   55.993717194,   121.639846802),
    vec3(86.050445557,   56.197097778,   122.222061157),
    vec3(85.839508057,   56.407749176,   122.803375244),
    vec3(85.627899170,   56.625740051,   123.383605957),
    vec3(85.415588379,   56.850975037,   123.962562561),
    vec3(85.202598572,   57.083656311,   124.540260315),
    vec3(84.988906860,   57.323806763,   125.116561890),
    vec3(84.774482727,   57.571437836,   125.691352844),
    vec3(84.559356689,   57.826648712,   126.264503479),
    vec3(84.343513489,   58.089435577,   126.835929871),
    vec3(84.126922607,   58.359870911,   127.405509949),
    vec3(83.909606934,   58.637973785,   127.973114014),
    vec3(83.691543579,   58.923851013,   128.538742065),
    vec3(83.472724915,   59.217472076,   129.102172852),
    vec3(83.253135681,   59.518959045,   129.663421631),
    vec3(83.032806396,   59.828327179,   130.222335815),
    vec3(82.811668396,   60.145618439,   130.778869629),
    vec3(82.589759827,   60.470836639,   131.332870483),
    vec3(82.367042542,   60.804111481,   131.884323120),
    vec3(82.143539429,   61.145442963,   132.433135986),
    vec3(81.919212341,   61.494869232,   132.979187012),
    vec3(81.694076538,   61.852439880,   133.522445679),
    vec3(81.468116760,   62.218284607,   134.062881470),
    vec3(81.241317749,   62.592380524,   134.600372314),
    vec3(81.013664246,   62.974582672,   135.134689331),
    vec3(80.785148621,   63.365234375,   135.666030884),
    vec3(80.555763245,   63.764324188,   136.194290161),
    vec3(80.325508118,   64.171775818,   136.719299316),
    vec3(80.094375610,   64.587768555,   137.241119385),
    vec3(79.862335205,   65.012237549,   137.759567261),
    vec3(79.629386902,   65.445297241,   138.274703979),
    vec3(79.395530701,   65.887001038,   138.786422729),
    vec3(79.160736084,   66.337326050,   139.294692993),
    vec3(78.925003052,   66.796470642,   139.799530029),
    vec3(78.688323975,   67.264305115,   140.300796509),
    vec3(78.877899170,   65.514877319,   141.141952515),
    vec3(79.065383911,   63.881839752,   141.977005005),
    vec3(79.250946045,   62.350395203,   142.808227539),
    vec3(79.434852600,   60.908729553,   143.637405396),
    vec3(79.617195129,   59.547241211,   144.466079712),
    vec3(79.798118591,   58.258022308,   145.295516968),
    vec3(79.977729797,   57.034202576,   146.126602173),
    vec3(80.156143188,   55.870357513,   146.960281372),
    vec3(80.333389282,   54.761589050,   147.797302246),
    vec3(80.509582520,   53.703643799,   148.638229370),
    vec3(80.684753418,   52.693061829,   149.483657837),
    vec3(80.858985901,   51.726593018,   150.333969116),
    vec3(81.032272339,   50.801464081,   151.189544678),
    vec3(81.204696655,   49.915168762,   152.050689697),
    vec3(81.376304626,   49.065593719,   152.917694092),
    vec3(81.547119141,   48.250698090,   153.790725708),
    vec3(81.717140198,   47.468814850,   154.669982910),
    vec3(81.886428833,   46.718269348,   155.555572510),
    vec3(82.054992676,   45.997573853,   156.447509766),
    vec3(82.222869873,   45.305656433,   157.345977783),
    vec3(82.390068054,   44.641063690,   158.250839233),
    vec3(82.556617737,   44.002845764,   159.162094116),
    vec3(82.722541809,   43.389842987,   160.079696655),
    vec3(82.887840271,   42.801326752,   161.003616333),
    vec3(83.052543640,   42.236370087,   161.933639526),
    vec3(83.216651917,   41.694137573,   162.869628906),
    vec3(83.380195618,   41.173950195,   163.811462402),
    vec3(83.543174744,   40.675094604,   164.758880615),
    vec3(83.705589294,   40.196971893,   165.711669922),
    vec3(83.867492676,   39.738891602,   166.669555664),
    vec3(84.028854370,   39.300395966,   167.632278442),
    vec3(84.189720154,   38.880855560,   168.599487305),
    vec3(84.350067139,   38.479816437,   169.570892334),
    vec3(84.509918213,   38.096698761,   170.546096802),
    vec3(84.669273376,   37.731185913,   171.524795532),
    vec3(84.828170776,   37.382755280,   172.506576538),
    vec3(84.986587524,   37.050983429,   173.491027832),
    vec3(85.144523621,   36.735530853,   174.477737427),
    vec3(85.302024841,   36.435935974,   175.466278076),
    vec3(85.459068298,   36.151844025,   176.456161499),
    vec3(85.615684509,   35.882915497,   177.446990967),
    vec3(85.771850586,   35.628791809,   178.438232422),
    vec3(85.927581787,   35.389049530,   179.429534912),
    vec3(86.082901001,   35.163471222,   180.420303345),
    vec3(86.237777710,   34.951580048,   181.410110474),
    vec3(86.392257690,   34.753227234,   182.398452759),
    vec3(86.546348572,   34.567913055,   183.384872437),
    vec3(86.700004578,   34.395446777,   184.368881226),
    vec3(86.853279114,   34.235534668,   185.349960327),
    vec3(87.006156921,   34.087818146,   186.327743530),
    vec3(87.158653259,   33.952041626,   187.301696777),
    vec3(87.310752869,   33.827816010,   188.271362305),
    vec3(87.462486267,   33.714946747,   189.236328125),
    vec3(87.613830566,   33.613063812,   190.196105957),
    vec3(87.764823914,   33.522029877,   191.150314331),
    vec3(87.915412903,   33.441452026,   192.098571777),
    vec3(88.065673828,   33.370994568,   193.040466309),
    vec3(88.215576172,   33.310550690,   193.975601196),
    vec3(88.365097046,   33.259796143,   194.903610229),
    vec3(88.514282227,   33.218383789,   195.824203491),
    vec3(87.977340698,   32.965858459,   196.752716064),
    vec3(87.436416626,   32.719913483,   197.704483032),
    vec3(86.891456604,   32.480758667,   198.680038452),
    vec3(86.342369080,   32.249198914,   199.679550171),
    vec3(85.789077759,   32.025310516,   200.703613281),
    vec3(85.231491089,   31.809827805,   201.752319336),
    vec3(84.669479370,   31.603101730,   202.826065063),
    vec3(84.102989197,   31.405641556,   203.925048828),
    vec3(83.531883240,   31.218002319,   205.049407959),
    vec3(82.956077576,   31.040744781,   206.199295044),
    vec3(82.375427246,   30.874475479,   207.374588013),
    vec3(81.789863586,   30.719760895,   208.575378418),
    vec3(81.199256897,   30.577146530,   209.801452637),
    vec3(80.603477478,   30.447292328,   211.052658081),
    vec3(80.002372742,   30.330873489,   212.328674316),
    vec3(79.395828247,   30.228591919,   213.628952026),
    vec3(78.783721924,   30.140913010,   214.953247070),
    vec3(78.165863037,   30.068721771,   216.300720215),
    vec3(77.542144775,   30.012662888,   217.670608521),
    vec3(76.912353516,   29.973396301,   219.062240601),
    vec3(76.276397705,   29.951663971,   220.474472046),
    vec3(75.634040833,   29.948234558,   221.906280518),
    vec3(74.985107422,   29.963779449,   223.356521606),
    vec3(74.329429626,   29.999023438,   224.823867798),
    vec3(73.666801453,   30.054727554,   226.306854248),
    vec3(72.996978760,   30.131595612,   227.804046631),
    vec3(72.319778442,   30.230453491,   229.313690186),
    vec3(71.634963989,   30.351911545,   230.834304810),
    vec3(70.942253113,   30.496717453,   232.364135742),
    vec3(70.241424561,   30.665601730,   233.901336670),
    vec3(69.532180786,   30.859329224,   235.444030762),
    vec3(68.814239502,   31.078489304,   236.990539551),
    vec3(68.087303162,   31.323970795,   238.538604736),
    vec3(67.351028442,   31.596284866,   240.086883545),
    vec3(66.605064392,   31.896312714,   241.633087158),
    vec3(65.849052429,   32.224590302,   243.175933838),
    vec3(65.082626343,   32.581962585,   244.713165283),
    vec3(64.305343628,   32.969078064,   246.243347168),
    vec3(63.516754150,   33.386711121,   247.764877319),
    vec3(62.716407776,   33.835601807,   249.276184082),
    vec3(61.903770447,   34.316509247,   250.776199341),
    vec3(61.078292847,   34.830303192,   252.263290405),
    vec3(60.239398956,   35.377796173,   253.736541748),
    vec3(59.386451721,   35.959934235,   255.194854736),
    vec3(58.518772125,   36.577690125,   256.637237549),
    vec3(57.635604858,   37.232089996,   258.063415527),
    vec3(56.736137390,   37.924362183,   259.472290039),
    vec3(55.819488525,   38.655723572,   260.863647461),
    vec3(54.884685516,   39.427581787,   262.237304688),
    vec3(53.930717468,   40.241458893,   263.593017578),
    vec3(52.956401825,   41.099113464,   264.930786133),
    vec3(51.960418701,   42.002483368,   266.250946045),
    vec3(50.941421509,   42.953731537,   267.553802490),
    vec3(49.897766113,   43.955390930,   268.839843750),
    vec3(48.827686310,   45.010299683,   270.109832764),
    vec3(47.729225159,   46.121669769,   271.364837646),
    vec3(46.600101471,   47.293331146,   272.605834961),
    vec3(45.437782288,   48.529567719,   273.834259033),
    vec3(44.239322662,   49.835586548,   275.051940918),
    vec3(43.001277924,   51.217414856,   276.260742188),
    vec3(43.486808777,   50.958110809,   278.019927979),
    vec3(43.965251923,   50.747104645,   279.747833252),
    vec3(44.436882019,   50.581275940,   281.443237305),
    vec3(44.901977539,   50.457733154,   283.105163574),
    vec3(45.360836029,   50.373714447,   284.733123779),
    vec3(45.813671112,   50.326652527,   286.326385498),
    vec3(46.260746002,   50.314079285,   287.884643555),
    vec3(46.702247620,   50.333675385,   289.407501221),
    vec3(47.138408661,   50.383281708,   290.894897461),
    vec3(47.569377899,   50.460865021,   292.346923828),
    vec3(47.995376587,   50.564460754,   293.763641357),
    vec3(48.416538239,   50.692298889,   295.145263672),
    vec3(48.833065033,   50.842647552,   296.492248535),
    vec3(49.245075226,   51.013900757,   297.804870605),
    vec3(49.652702332,   51.204551697,   299.083618164),
    vec3(50.056118011,   51.413284302,   300.329254150),
    vec3(50.455413818,   51.638656616,   301.542175293),
    vec3(50.850719452,   51.879486084,   302.723114014),
    vec3(51.242179871,   52.134632111,   303.872833252),
    vec3(51.629871368,   52.402961731,   304.991912842),
    vec3(52.013935089,   52.683521271,   306.081268311),
    vec3(52.394424438,   52.975349426,   307.141510010),
    vec3(52.771453857,   53.277488708,   308.173431396),
    vec3(53.145130157,   53.589221954,   309.177886963),
    vec3(53.515518188,   53.909732819,   310.155639648),
    vec3(53.882724762,   54.238304138,   311.107421875),
    vec3(54.246799469,   54.574237823,   312.033996582),
    vec3(54.607849121,   54.916954041,   312.936187744),
    vec3(54.965938568,   55.265918732,   313.814758301),
    vec3(55.321128845,   55.620433807,   314.670318604),
    vec3(55.673484802,   55.980117798,   315.503692627),
    vec3(56.023086548,   56.344490051,   316.315551758),
    vec3(56.369991302,   56.713092804,   317.106658936),
    vec3(56.714248657,   57.085449219,   317.877502441),
    vec3(57.055927277,   57.461280823,   318.628936768),
    vec3(57.395084381,   57.840194702,   319.361511230),
    vec3(57.731777191,   58.221878052,   320.075897217),
    vec3(58.066047668,   58.605991364,   320.772613525),
    vec3(58.397926331,   58.992195129,   321.452209473),
    vec3(58.727527618,   59.380428314,   322.115417480),
    vec3(59.054821014,   59.770221710,   322.762603760),
    vec3(59.379898071,   60.161396027,   323.394348145),
    vec3(59.702777863,   60.553836823,   324.011169434),
    vec3(60.023521423,   60.947223663,   324.613555908),
    vec3(60.342163086,   61.341449738,   325.201965332),
    vec3(60.658733368,   61.736316681,   325.776855469),
    vec3(60.973297119,   62.131679535,   326.338684082),
    vec3(61.285865784,   62.527378082,   326.887847900),
    vec3(61.596477509,   62.923233032,   327.424743652),
    vec3(61.905174255,   63.319175720,   327.949798584),
    vec3(62.212001801,   63.715126038,   328.463409424),
    vec3(62.516967773,   64.110862732,   328.965850830),
    vec3(62.820114136,   64.506317139,   329.457519531),
    vec3(63.121486664,   64.901367188,   329.938751221),
    vec3(63.421089172,   65.296119690,   330.409912109),
    vec3(63.718967438,   65.690223694,   330.871246338),
    vec3(64.015136719,   66.083679199,   331.323059082),
    vec3(64.309661865,   66.476547241,   331.765686035),
    vec3(64.602531433,   66.868698120,   332.199432373),
    vec3(64.893775940,   67.259963989,   332.624450684),
    vec3(64.678749084,   67.203002930,   333.046966553),
    vec3(64.462814331,   67.148544312,   333.475250244),
    vec3(64.245933533,   67.096527100,   333.909362793),
    vec3(64.028121948,   67.047225952,   334.349578857),
    vec3(63.809352875,   67.000556946,   334.795928955),
    vec3(63.589603424,   66.956520081,   335.248535156),
    vec3(63.368869781,   66.915519714,   335.707641602),
    vec3(63.147144318,   66.877334595,   336.173248291),
    vec3(62.924404144,   66.842231750,   336.645660400),
    vec3(62.700634003,   66.810241699,   337.124969482),
    vec3(62.475818634,   66.781463623,   337.611389160),
    vec3(62.249938965,   66.755966187,   338.105010986),
    vec3(62.022983551,   66.733947754,   338.606109619),
    vec3(61.794925690,   66.715370178,   339.114837646),
    vec3(61.565769196,   66.700447083,   339.631408691),
    vec3(61.335487366,   66.689369202,   340.156097412),
    vec3(61.104034424,   66.682037354,   340.689025879),
    vec3(60.871410370,   66.678771973,   341.230560303),
    vec3(60.637622833,   66.679565430,   341.780853271),
    vec3(60.402591705,   66.684646606,   342.340240479),
    vec3(60.166339874,   66.694099426,   342.908996582),
    vec3(59.928833008,   66.708068848,   343.487426758),
    vec3(59.690052032,   66.726699829,   344.075836182),
    vec3(59.449966431,   66.750183105,   344.674621582),
    vec3(59.208541870,   66.778678894,   345.284179688),
    vec3(58.965770721,   66.812324524,   345.904846191),
    vec3(58.721603394,   66.851341248,   346.537109375),
    vec3(58.476043701,   66.895874023,   347.181396484),
    vec3(58.229030609,   66.946014404,   347.838226318),
    vec3(57.980529785,   67.002189636,   348.508178711),
    vec3(57.730545044,   67.064506531,   349.191802979),
    vec3(57.478981018,   67.133125305,   349.889831543),
    vec3(57.225864410,   67.208419800,   350.602935791),
    vec3(56.971122742,   67.290519714,   351.331848145),
    vec3(56.714717865,   67.379844666,   352.077514648),
    vec3(56.456600189,   67.476531982,   352.840820312),
    vec3(56.196723938,   67.581039429,   353.622863770),
    vec3(55.935062408,   67.693626404,   354.424774170),
    vec3(55.671531677,   67.814712524,   355.247955322),
    vec3(55.406082153,   67.944633484,   356.093750000),
    vec3(55.138648987,   68.083908081,   356.963958740),
    vec3(54.869163513,   68.233093262,   357.860351562),
    vec3(54.597557068,   68.392669678,   358.785186768),
    vec3(54.323745728,   68.563339233,   359.740875244)
);

const float upperHullGammaTable[table_size] = float[](
    0.888256788,
    0.887408376,
    0.886523426,
    0.885723829,
    0.884887695,
    0.884118617,
    0.883337379,
    0.882550001,
    0.881878614,
    0.881140172,
    0.880444407,
    0.879748583,
    0.879150391,
    0.878503382,
    0.877887011,
    0.877301097,
    0.876745582,
    0.876184046,
    0.875671327,
    0.875146508,
    0.874713063,
    0.874194384,
    0.873754978,
    0.873358250,
    0.872930884,
    0.872595191,
    0.872192383,
    0.874084473,
    0.876696765,
    0.879107714,
    0.881414890,
    0.883709788,
    0.885766506,
    0.887847900,
    0.889764428,
    0.891656518,
    0.893426418,
    0.895202577,
    0.896887183,
    0.898492455,
    0.900140405,
    0.901556373,
    0.903100610,
    0.904559374,
    0.905932546,
    0.907342553,
    0.908648610,
    0.909948647,
    0.911236525,
    0.912512183,
    0.913714528,
    0.914898634,
    0.916125476,
    0.917260647,
    0.918389797,
    0.919549465,
    0.920593202,
    0.921661258,
    0.922735453,
    0.923822045,
    0.924859524,
    0.925830007,
    0.926873803,
    0.927947998,
    0.928961158,
    0.929834008,
    0.930871546,
    0.931787074,
    0.932830811,
    0.933843970,
    0.934680164,
    0.935675025,
    0.936547875,
    0.937561035,
    0.938482642,
    0.939483643,
    0.940405250,
    0.941351295,
    0.942144871,
    0.943133593,
    0.944006383,
    0.945056140,
    0.945898414,
    0.946844459,
    0.947766125,
    0.948620558,
    0.949511766,
    0.950463772,
    0.951269507,
    0.952307165,
    0.953192115,
    0.954193115,
    0.955084205,
    0.955932498,
    0.956854224,
    0.957617104,
    0.958361804,
    0.959393263,
    0.960205019,
    0.960986316,
    0.961663842,
    0.962243617,
    0.963030934,
    0.963336110,
    0.954974413,
    0.931744337,
    0.907800257,
    0.895385623,
    0.897857666,
    0.900170922,
    0.902386427,
    0.904418945,
    0.906353712,
    0.908129930,
    0.909832716,
    0.911413491,
    0.912914991,
    0.914361596,
    0.915698171,
    0.917022586,
    0.918188453,
    0.919390798,
    0.920489430,
    0.921490431,
    0.922430396,
    0.923406959,
    0.924273610,
    0.925103664,
    0.925884962,
    0.926592946,
    0.927343726,
    0.927978456,
    0.928594828,
    0.929162562,
    0.929711938,
    0.930236816,
    0.930700660,
    0.931115687,
    0.931536913,
    0.931909084,
    0.932220459,
    0.934222341,
    0.936859131,
    0.939294398,
    0.941558838,
    0.943701208,
    0.945727587,
    0.947595179,
    0.949365258,
    0.951074243,
    0.952642798,
    0.954101562,
    0.955511451,
    0.956890821,
    0.958172560,
    0.959368825,
    0.960467577,
    0.961572230,
    0.962561011,
    0.963580251,
    0.964526296,
    0.965319812,
    0.966223121,
    0.967016578,
    0.967749000,
    0.968444765,
    0.969140649,
    0.969787598,
    0.970367432,
    0.970977783,
    0.971508861,
    0.972088695,
    0.972546399,
    0.972985864,
    0.973431468,
    0.973883152,
    0.974237084,
    0.974554420,
    0.974926829,
    0.975274682,
    0.975549340,
    0.975842297,
    0.976074219,
    0.976269484,
    0.976452649,
    0.976647913,
    0.976794422,
    0.976922631,
    0.976977587,
    0.976922631,
    0.977075219,
    0.977056861,
    0.977081299,
    0.977044702,
    0.976977587,
    0.976855516,
    0.979400635,
    0.990423560,
    0.990191698,
    0.989941478,
    0.989746094,
    0.989514232,
    0.989312768,
    0.989056468,
    0.988873363,
    0.988659680,
    0.988433838,
    0.988171399,
    0.987963796,
    0.987762451,
    0.987561047,
    0.987341285,
    0.987139940,
    0.986914098,
    0.986712694,
    0.986529589,
    0.986297607,
    0.986096203,
    0.985864282,
    0.985687256,
    0.985461414,
    0.985272288,
    0.985082984,
    0.984857202,
    0.984631360,
    0.984442115,
    0.984234571,
    0.984014869,
    0.983825684,
    0.983593762,
    0.983380079,
    0.983184814,
    0.982946813,
    0.982751489,
    0.982543945,
    0.982305884,
    0.982067883,
    0.981878638,
    0.981652915,
    0.981414914,
    0.981195092,
    0.980938673,
    0.980725169,
    0.980474949,
    0.980230808,
    0.979986668,
    0.979736388,
    0.979467869,
    0.979229808,
    0.978955090,
    0.978680491,
    0.978417993,
    0.978131175,
    0.977832079,
    0.977563500,
    0.977258384,
    0.976947069,
    0.976635695,
    0.976330578,
    0.975988805,
    0.975640893,
    0.975305259,
    0.974951208,
    0.974572778,
    0.974182189,
    0.973815978,
    0.973394871,
    0.972967625,
    0.972534180,
    0.972094774,
    0.971624732,
    0.971130371,
    0.970623851,
    0.970104933,
    0.969561696,
    0.969000220,
    0.968389869,
    0.968280077,
    0.968371570,
    0.968426466,
    0.968511939,
    0.968591273,
    0.968658447,
    0.968750000,
    0.968798816,
    0.968890429,
    0.968963623,
    0.969036937,
    0.969122291,
    0.969189465,
    0.969262719,
    0.969348133,
    0.969421327,
    0.969494641,
    0.969580054,
    0.969659448,
    0.969732642,
    0.969805837,
    0.969897389,
    0.969976783,
    0.970049977,
    0.970129371,
    0.970220923,
    0.970300257,
    0.970391750,
    0.970483422,
    0.970568836,
    0.970666528,
    0.970745802,
    0.970843554,
    0.970935047,
    0.971026659,
    0.971136451,
    0.971228063,
    0.971319556,
    0.971423388,
    0.971527100,
    0.971637011,
    0.971752882,
    0.971856713,
    0.971966624,
    0.972088695,
    0.972210646,
    0.972332716,
    0.972460926,
    0.972583055,
    0.972711205,
    0.972863793,
    0.966900587,
    0.955664039,
    0.944671631,
    0.933868408,
    0.923278749,
    0.916271925,
    0.915112257,
    0.914001465,
    0.912780702,
    0.911682129,
    0.910595596,
    0.909423769,
    0.908337355,
    0.907244921,
    0.906140149,
    0.905035496,
    0.903991640,
    0.902917445,
    0.901898146,
    0.900836110,
    0.899780273,
    0.898742735,
    0.897711158,
    0.896740675,
    0.895739675,
    0.894744873,
    0.893756032,
    0.892779469,
    0.891888380,
    0.890954614,
    0.890051305,
    0.889123559
);

#endif


#define M_PI 3.1415926535897932384626433832795

// Declaration of all helper methods

const mat3 AP0toXYZ = transpose(mat3(
     0.952552557, 0.000000000,  0.000093679,
     0.343966514, 0.728166044, -0.072132550,
    -0.000000039, 0.000000000,  1.008825183));
const mat3 XYZtoAP1 = transpose(mat3(
     1.641023159, -0.324803293, -0.236424685,
    -0.663663030,  1.615332007,  0.016756365,
     0.011721910, -0.008284439,  0.988394737));
const mat3 AP1toXYZ = transpose(mat3(
     0.662454247, 0.134004191, 0.156187713,
     0.272228748, 0.674081624, 0.053689521,
    -0.005574661, 0.004060729, 1.010339141));

const mat3 MATRIX_16 = transpose(mat3(
     0.364074469, 0.594700873, 0.041101277,
    -0.222245112, 1.073855400, 0.147945315,
    -0.002067621, 0.048825976, 0.950387657));
const mat3 MATRIX_16_INV = transpose(mat3(
     2.051275492, -1.140031576,  0.088755645,
     0.426939040,  0.700583577, -0.127522483,
    -0.017471245, -0.038472541,  1.058946729));

// const mat3 LIMIT_RGB_TO_XYZ = transpose(mat3(
//     0.412390828, 0.357584327, 0.180480868,
//     0.212639034, 0.715168655, 0.072192341,
//     0.019330820, 0.119194724, 0.950532556));
const mat3 LIMIT_XYZ_TO_RGB = transpose(mat3(
    3.240969658, -1.537383080, -0.498610765,
   -0.969243705,  1.875967503,  0.041555081,
    0.055630006, -0.203976765,  1.056970954));

const float reference_luminance = 100.f;
// const float L_A = 100.f;
// const float Y_b = 20.f;
const float ac_resp = 1.f;
const float ra = 2.f * ac_resp;
const float ba = 0.05f + (2.f - ra);
const mat3 panlrcm = transpose(mat3(
    460.0,  450.999938965,  288.0,
    460.0, -891.000061035, -261.0,
    460.0, -220.0        , -6300.0));
const vec3 surround = vec3(0.9f, 0.59f, 0.9f); // Dim surround

const float INPUT_F_L = 0.793700576;
const float INPUT_z = 1.927213669;
const vec3  INPUT_D_RGB = vec3(1.017295003, 0.988742769, 0.994400442);
const float INPUT_A_w = 39.488994598;
const float INPUT_A_w_J = 12.947210312;

const float LIMIT_F_L = 0.793700576;
const float LIMIT_z = 1.927213669;
const vec3  LIMIT_D_RGB = vec3(1.014714122, 0.976808310, 0.924309909);
const float LIMIT_A_w = 39.488994598;
const float LIMIT_A_w_J = 12.947210312;

const float TS_n_r = 100.000000000;
const float TS_g   = 1.149999976;
const float TS_t_1 = 0.039999999;
// const float TS_c_t = 0.100129992;
const float TS_s_2 = 0.919858396;
// const float TS_u_2 = 0.991799057;
const float TS_m_2 = 1.047103763;

const float limit_J_max = 100.000015259;
const float mid_J       = 34.096538544;
const float model_gamma = 0.879464149;
const float sat         = 1.299999952;
const float sat_thr     = 0.005000000;
const float compr       = 2.400000095;
const float focus_dist  = 1.350000024;

const float smooth_cusps = 0.12f;
const float smooth_m = 0.27f;
const float cusp_mid_blend = 1.3f;
const float focus_gain_blend = 0.3f;
const float focus_adjust_gain = 0.55f;
// const float focus_distance = 1.35f;
// const float focus_distance_scaling = 1.75f;
const float lower_hull_gamma = 1.14f;
const vec4  compr_func_params = vec4(0.75f, 1.1f, 1.3f, 1.f);

// Utilities

float smin(float a, float b, float s)
{
    float h = max(s - abs(a - b), 0.f) / s;
    return min(a, b) - h * h * h * s * (1.f / 6.f);
}

float wrap_to_360(float hue)
{
    float y = mod(hue, 360.f);
    if ( y < 0.f)
    {
        y = y + 360.f;
    }
    return y;
}

float radians_to_degrees(float radians)
{
    return radians * 180.f / M_PI;
}

float degrees_to_radians(float degrees)
{
    return degrees / 180.f * M_PI;
}

// Functions

float base_hue_for_position(int i_lo, int table_size)
{
    float result = i_lo * 360.f / table_size;
    return result;
}

int next_position_in_table(int entry, int table_size)
{
    int result = (entry + 1) % table_size;
    return result;
}

int hue_position_in_uniform_table(float hue, int table_size)
{
    float wrapped_hue = wrap_to_360(hue);
    // TODO:
    int result = int(wrapped_hue / 360.f * table_size);
    return result;
}

#ifdef USE_BUFFER
vec2 cuspFromTable(float h, vec4 gt[table_size])
{
    vec3 lo;
    vec3 hi;

    if (h <= gt[0][2])
    {
        lo[0] = gt[table_size-1][0];
        lo[1] = gt[table_size-1][1];
        lo[2] = gt[table_size-1][2] - 360.f;

        hi[0] = gt[0][0];
        hi[1] = gt[0][1];
        hi[2] = gt[0][2];
    }
    else if (h >= gt[table_size-1][2])
    {
        lo[0] = gt[table_size-1][0];
        lo[1] = gt[table_size-1][1];
        lo[2] = gt[table_size-1][2];

        hi[0] = gt[0][0];
        hi[1] = gt[0][1];
        hi[2] = gt[0][2] + 360.f;
    }
    else
    {
        int low_i = 0;
        int high_i = table_size;
        // allowed as we have an extra entry in the table
        int i = hue_position_in_uniform_table(h, table_size);

        while (low_i + 1 < high_i)
        {
            if (h > gt[i][2])
            {
                low_i = i;
            }
            else
            {
                high_i = i;
            }
            // TODO:
            i = int((low_i + high_i) / 2.f);
        }

        lo[0] = gt[high_i-1][0];
        lo[1] = gt[high_i-1][1];
        lo[2] = gt[high_i-1][2];

        hi[0] = gt[high_i][0];
        hi[1] = gt[high_i][1];
        hi[2] = gt[high_i][2];
    }

    float t = (h - lo[2]) / (hi[2] - lo[2]);
    float cuspJ = mix(lo[0], hi[0], t);
    float cuspM = mix(lo[1], hi[1], t);

    return vec2(cuspJ, cuspM);
}

#else

vec2 gamutCuspFromTable(float h)
{
    vec3 lo;
    vec3 hi;

    if (h <= gamut_cusp_table[0][2])
    {
        lo[0] = gamut_cusp_table[table_size-1][0];
        lo[1] = gamut_cusp_table[table_size-1][1];
        lo[2] = gamut_cusp_table[table_size-1][2] - 360.f;

        hi[0] = gamut_cusp_table[0][0];
        hi[1] = gamut_cusp_table[0][1];
        hi[2] = gamut_cusp_table[0][2];
    }
    else if (h >= gamut_cusp_table[table_size-1][2])
    {
        lo[0] = gamut_cusp_table[table_size-1][0];
        lo[1] = gamut_cusp_table[table_size-1][1];
        lo[2] = gamut_cusp_table[table_size-1][2];

        hi[0] = gamut_cusp_table[0][0];
        hi[1] = gamut_cusp_table[0][1];
        hi[2] = gamut_cusp_table[0][2] + 360.f;
    }
    else
    {
        int low_i = 0;
        int high_i = table_size;
        // allowed as we have an extra entry in the table
        int i = hue_position_in_uniform_table(h, table_size);

        while (low_i + 1 < high_i)
        {
            if (h > gamut_cusp_table[i][2])
            {
                low_i = i;
            }
            else
            {
                high_i = i;
            }
            // TODO:
            i = int((low_i + high_i) / 2.f);
        }

        lo[0] = gamut_cusp_table[high_i-1][0];
        lo[1] = gamut_cusp_table[high_i-1][1];
        lo[2] = gamut_cusp_table[high_i-1][2];

        hi[0] = gamut_cusp_table[high_i][0];
        hi[1] = gamut_cusp_table[high_i][1];
        hi[2] = gamut_cusp_table[high_i][2];
    }

    float t = (h - lo[2]) / (hi[2] - lo[2]);
    float cuspJ = mix(lo[0], hi[0], t);
    float cuspM = mix(lo[1], hi[1], t);

    return vec2(cuspJ, cuspM);
}

vec2 reachCuspFromTable(float h)
{
    vec3 lo;
    vec3 hi;

    if (h <= reach_gamut_table[0][2])
    {
        lo[0] = reach_gamut_table[table_size-1][0];
        lo[1] = reach_gamut_table[table_size-1][1];
        lo[2] = reach_gamut_table[table_size-1][2] - 360.f;

        hi[0] = reach_gamut_table[0][0];
        hi[1] = reach_gamut_table[0][1];
        hi[2] = reach_gamut_table[0][2];
    }
    else if (h >= reach_gamut_table[table_size-1][2])
    {
        lo[0] = reach_gamut_table[table_size-1][0];
        lo[1] = reach_gamut_table[table_size-1][1];
        lo[2] = reach_gamut_table[table_size-1][2];

        hi[0] = reach_gamut_table[0][0];
        hi[1] = reach_gamut_table[0][1];
        hi[2] = reach_gamut_table[0][2] + 360.f;
    }
    else
    {
        int low_i = 0;
        int high_i = table_size;
        // allowed as we have an extra entry in the table
        int i = hue_position_in_uniform_table(h, table_size);

        while (low_i + 1 < high_i)
        {
            if (h > reach_gamut_table[i][2])
            {
                low_i = i;
            }
            else
            {
                high_i = i;
            }
            // TODO:
            i = int((low_i + high_i) / 2.f);
        }

        lo[0] = reach_gamut_table[high_i-1][0];
        lo[1] = reach_gamut_table[high_i-1][1];
        lo[2] = reach_gamut_table[high_i-1][2];

        hi[0] = reach_gamut_table[high_i][0];
        hi[1] = reach_gamut_table[high_i][1];
        hi[2] = reach_gamut_table[high_i][2];
    }

    float t = (h - lo[2]) / (hi[2] - lo[2]);
    float cuspJ = mix(lo[0], hi[0], t);
    float cuspM = mix(lo[1], hi[1], t);

    return vec2(cuspJ, cuspM);
}
#endif

#ifdef USE_BUFFER
float reachFromTable(float h, float gt[table_size])
{
    int i_lo = hue_position_in_uniform_table( h, table_size);
    int i_hi = next_position_in_table( i_lo, table_size);

    float lo = gt[i_lo];
    float hi = gt[i_hi];

    float t = (h - i_lo) / (i_hi - i_lo);

    return mix(lo, hi, t);
}
#else
float reachFromTable(float h)
{
    int i_lo = hue_position_in_uniform_table( h, table_size);
    int i_hi = next_position_in_table( i_lo, table_size);

    float lo = reach_cusp_table[i_lo];
    float hi = reach_cusp_table[i_hi];

    float t = (h - i_lo) / (i_hi - i_lo);

    return mix(lo, hi, t);
}
#endif

float toe( float x, float limit, float k1_in, float k2_in)
{
    if (x > limit)
    {
        return x;
    }

    float k2 = max(k2_in, 0.001f);
    float k1 = sqrt(k1_in * k1_in + k2 * k2);
    float k3 = (limit + k1) / (limit + k2);

    return 0.5f * (k3 * x - k1 + sqrt((k3 * x - k1) * (k3 * x - k1) + 4.f * k2 * k3 * x));
}

float get_focus_gain(float J, float cuspJ, float limit_J_max)
{
    float thr = mix(cuspJ, limit_J_max, focus_gain_blend);

    if (J > thr)
    {
        // Approximate inverse required above threshold
        float gain = (limit_J_max - thr) / max(0.0001f, (limit_J_max - min(limit_J_max, J)));
        return pow(log(gain) / log(10.), 1. / focus_adjust_gain) + 1.f;
    }
    else
    {
        // Analytic inverse possible below cusp
        return 1.f;
    }
}

float solve_J_intersect(float J, float M, float focusJ, float maxJ, float slope_gain)
{
    float a = M / (focusJ * slope_gain);
    float b = 0.f;
    float c = 0.f;
    float intersectJ = 0.f;

    if (J < focusJ)
    {
        b = 1.f - M / slope_gain;
    }
    else
    {
        b = - (1.f + M / slope_gain + maxJ * M / (focusJ * slope_gain));
    }

    if (J < focusJ)
    {
        c = -J;
    }
    else
    {
        c = maxJ * M / slope_gain + J;
    }

    float root = sqrt(b * b - 4.f * a * c);

    if (J < focusJ)
    {
        intersectJ = 2.f * c / (-b - root);
    }
    else
    {
        intersectJ = 2.f * c / (-b + root);
    }

    return intersectJ;
}

vec3 get_reach_boundary(float J, float M, float h)
{
    int i_lo = hue_position_in_uniform_table(h, table_size);
    int i_hi = next_position_in_table(i_lo, table_size);

#ifdef USE_BUFFER
    float lo = tablesBuffer.reach_cusp_table[i_lo];
    float hi = tablesBuffer.reach_cusp_table[i_hi];
#else
    float lo = reach_cusp_table[i_lo];
    float hi = reach_cusp_table[i_hi];
#endif

    float t = (h - i_lo) / (360.f / table_size);

    float reachMaxM = mix(lo, hi, t);

#ifdef USE_BUFFER
    vec2 JMcusp = cuspFromTable(h, tablesBuffer.gamut_cusp_table);
#else
    vec2 JMcusp = gamutCuspFromTable(h);
#endif

    float focusJ = mix(JMcusp[0], mid_J, min(1.f, cusp_mid_blend - (JMcusp[0] / limit_J_max)));
    float slope_gain = limit_J_max * focus_dist * get_focus_gain(J, JMcusp[0], limit_J_max);

    float intersectJ = solve_J_intersect(J, M, focusJ, limit_J_max, slope_gain);

    float slope;
    if (intersectJ < focusJ)
    {
        slope = intersectJ * (intersectJ - focusJ) / (focusJ * slope_gain);
    }
    else
    {
        slope = (limit_J_max - intersectJ) * (intersectJ - focusJ) / (focusJ * slope_gain);
    }

    float boundary = limit_J_max * pow(intersectJ / limit_J_max, model_gamma) * reachMaxM / (limit_J_max - slope * reachMaxM);
    return vec3(J, boundary, h);
}

#ifdef USE_BUFFER
float hueDependentUpperHullGamma(float h, float gt[table_size])
{
    int i_lo = hue_position_in_uniform_table(h, table_size);
    int i_hi = next_position_in_table(i_lo, table_size);

    float base_hue = base_hue_for_position(i_lo, table_size);
    float t = wrap_to_360(h) - base_hue;

    return mix(gt[i_lo], gt[i_hi], t);
}
#else
float hueDependentUpperHullGamma(float h)
{
    int i_lo = hue_position_in_uniform_table(h, table_size);
    int i_hi = next_position_in_table(i_lo, table_size);

    float base_hue = base_hue_for_position(i_lo, table_size);
    float t = wrap_to_360(h) - base_hue;

    return mix(upperHullGammaTable[i_lo], upperHullGammaTable[i_hi], t);
}
#endif

vec3 find_gamut_boundary_intersection(vec3 JMh_s, vec2 JM_cusp_in, float J_focus, float J_max, float slope_gain, float gamma_top, float gamma_bottom)
{
    float slope = 0.f;

    float s = max(0.000001f, smooth_cusps);
    vec2 JM_cusp = vec2(
        JM_cusp_in[0],
        JM_cusp_in[1] * (1.f + smooth_m * s)
    );

    float J_intersect_source = solve_J_intersect(JMh_s[0], JMh_s[1], J_focus, J_max, slope_gain);
    float J_intersect_cusp = solve_J_intersect(JM_cusp[0], JM_cusp[1], J_focus, J_max, slope_gain);

    if (J_intersect_source < J_focus)
    {
        slope = J_intersect_source * (J_intersect_source - J_focus) / (J_focus * slope_gain);
    }
    else
    {
        slope = (J_max - J_intersect_source) * (J_intersect_source - J_focus) / (J_focus * slope_gain);
    }

    float M_boundary_lower = J_intersect_cusp * pow(J_intersect_source / J_intersect_cusp, 1. / gamma_bottom) / (JM_cusp[0] / JM_cusp[1] - slope);
    float M_boundary_upper = JM_cusp[1] * (J_max - J_intersect_cusp) * pow((J_max - J_intersect_source) / (J_max - J_intersect_cusp), 1. / gamma_top) / (slope * JM_cusp[1] + J_max - JM_cusp[0]);
    float M_boundary = JM_cusp[1] * smin(M_boundary_lower / JM_cusp[1], M_boundary_upper / JM_cusp[1], s);
    float J_boundary = J_intersect_source + slope * M_boundary;

    return vec3(J_boundary, M_boundary, J_intersect_source);
}

float compressPowerP(float v, float thr, float lim, float power)
{
    float s = (lim-thr) / pow(pow((1.f-thr) / (lim-thr), -power) - 1.f, 1.f/power);
    float nd = (v - thr) / s;
    float p = pow(nd, power);

    float vCompressed;

    if ( v < thr || lim < 1.0001f)
    {
        vCompressed = v;
    }
    else
    {
        vCompressed = thr + s * nd / ( pow(1.f + p, 1.f / power));
    }

    return vCompressed;
}


// Declaration of the OCIO shader function

vec4 OCIODisplay(vec4 inPixel)
{
    vec4 outColor;

    for (int i = 0; i < 10; ++i)
    {
        outColor = inPixel;

    // Clamp AP1 and convert to XYZ
    {
        vec3 XYZ = AP0toXYZ * outColor.rgb;
        vec3 AP1 = XYZtoAP1 * XYZ;
        vec3 AP1_clamped = max(AP1, vec3(0.f));
        XYZ = AP1toXYZ * AP1_clamped;

        outColor.rgb = XYZ;
    }

    // XYZ to JMh
    {
        vec3 XYZ = outColor.rgb * reference_luminance;

        // Step 1 - Converting CIE XYZ tristimulus values to sharpened RGB values
        vec3 RGB = MATRIX_16 * XYZ;

        // Step 2
        vec3 RGB_c = INPUT_D_RGB * RGB;

        // Step 3 - apply  forward post-adaptation non-linear response compression
        vec3 F_L_v = pow(INPUT_F_L * abs(RGB_c) / 100.f, vec3(0.42f));
        vec3 RGB_a = (400.f * sign(RGB_c) * F_L_v) / (27.13f + F_L_v);

        // Step 4 - Converting to preliminary cartesian  coordinates
        float a = RGB_a.r - 12.f * RGB_a.g / 11.f + RGB_a.b / 11.f;
        float b = (RGB_a.r + RGB_a.g - 2.f * RGB_a.b) / 9.f;

        // Computing the hue angle math h
        float hr = atan(b, a);
        float h = wrap_to_360(radians_to_degrees(hr));

        // Step 6 - Computing achromatic responses for the stimulus
        float A = ra * RGB_a.r + RGB_a.g + ba * RGB_a.b;

        // Step 7 - Computing the correlate of lightness, J
        float J = 100.f * pow( A / INPUT_A_w, surround[1] * INPUT_z);

        // Step 9 - Computing the correlate of colourfulness, M
        float M = J == 0.f ? 0.f : 43.f * surround[2] * sqrt(a * a + b * b);

        outColor.rgb = vec3(J, M, h);
    }

    // ToneMap and ChromaCompress
    {
        float J = outColor[0];
        float M = outColor[1];
        float h = outColor[2];

        // Hellwig_J_to_Y
        float A = INPUT_A_w_J * pow(abs(J) / 100.f, 1.f / (surround[1] * INPUT_z));
        float linear =  sign(J) * 100.f / INPUT_F_L * pow((27.13f * A) / (400.f - A), 1.f / 0.42f);
        linear /= reference_luminance;

        // ToneScale
        float f = TS_m_2 * pow(max(0.f, linear) / (linear + TS_s_2), TS_g);
        float hh = max(0.f, f * f / (f + TS_t_1));
        float Y = hh * TS_n_r;

        // Y_to_Hellwig_J
        float F_L_Y = pow(INPUT_F_L * abs(Y) / 100., 0.42);
        float tonemappedJ = sign(Y) * 100.f * pow(((400.f * F_L_Y) / (27.13f + F_L_Y)) / INPUT_A_w_J, surround[1] * INPUT_z);

        // Chroma Compression
        float origJ = J;
        J = tonemappedJ;

        if (M != 0.0)
        {
            float nJ = J / limit_J_max;
            float snJ = max(0.f, 1.f - nJ);
#ifdef USE_BUFFER
            float Mnorm = cuspFromTable(h, tablesBuffer.reach_gamut_table)[1];
            float limit = pow(nJ, model_gamma) * reachFromTable(h, tablesBuffer.reach_cusp_table) / Mnorm;
#else
            float Mnorm = reachCuspFromTable(h)[1];
            float limit = pow(nJ, model_gamma) * reachFromTable(h) / Mnorm;
#endif

            M = M * pow(J / origJ, model_gamma);
            M = M / Mnorm;
            M = limit - toe(limit - M, limit - 0.001f, snJ * sat, sqrt(nJ * nJ + sat_thr));
            M = toe(M, limit, nJ * compr, snJ);

            M = M * Mnorm;
        }

        outColor.rgb = vec3(tonemappedJ, M, h);
    }

    // Gamut Compress
    {
        vec3 JMh = outColor.rgb;
        float J = outColor[0];
        float Jx = J;
        float M = outColor[1];
        float h = outColor[2];

        vec2 project_from = vec2(J, M);
#ifdef USE_BUFFER
        vec2 JMcusp = cuspFromTable(h, tablesBuffer.gamut_cusp_table);
#else
        vec2 JMcusp = gamutCuspFromTable(h);
#endif

        if (M < 0.0001f || J > limit_J_max)
        {
            outColor.rgb = vec3(J, 0.f, h);
        }

        float focusJ = mix(JMcusp[0], mid_J, min(1.f, cusp_mid_blend - (JMcusp[0] / limit_J_max)));
        float slope_gain = limit_J_max * focus_dist * get_focus_gain(Jx, JMcusp[0], limit_J_max);

#ifdef USE_BUFFER
        float gamma_top = hueDependentUpperHullGamma(h, tablesBuffer.upperHullGammaTable);
#else
        float gamma_top = hueDependentUpperHullGamma(h);
#endif
        float gamma_bottom = lower_hull_gamma;

        vec3 boundaryReturn = find_gamut_boundary_intersection(JMh, JMcusp, focusJ, limit_J_max, slope_gain, gamma_top, gamma_bottom);
        vec2 JMboundary = vec2(boundaryReturn[0], boundaryReturn[1]);
        vec2 project_to = vec2(boundaryReturn[2], 0.f);

        vec3 reachBoundary = get_reach_boundary(JMboundary[0], JMboundary[1], JMh[2]);

        float difference = max(1.0001f, reachBoundary[1] / JMboundary[1]);
        float threshold = max(compr_func_params[0], 1.f / difference);

        float v = project_from[1] / JMboundary[1];
        v = compressPowerP(v, threshold, difference, compr_func_params[3]);

        vec2 JMcompressed = vec2(
            project_to[0] + v * (JMboundary[0] - project_to[0]),
            project_to[1] + v * (JMboundary[1] - project_to[1])
        );

        outColor.rgb = vec3(JMcompressed[0], JMcompressed[1], JMh[2]);
    }

    // JMh to RGB
    {
        float J = outColor[0];
        float M = outColor[1];
        float h = outColor[2];

        float hr = degrees_to_radians(h);

        // Computing achromatic respons A for the stimulus
        float A = LIMIT_A_w * pow(J / 100.f, 1. / (surround[1] * LIMIT_z));

        // Computing P_p_1 to P_p_2
        float P_p_1 = 43.f * surround[2];
        float P_p_2 = A;

        // Step 3 - Computing opponent colour dimensions a and b
        float gamma = M / P_p_1;
        float a = gamma * cos(hr);
        float b = gamma * sin(hr);

        // Step 4 - Applying post-adaptation non-linear response compression matrix
        vec3 vec = vec3(P_p_2, a, b);
        vec3 RGB_a = 1.0/1403.0 * (panlrcm * vec);

        // Step 5 - Applying the inverse post-adaptation non-linear respnose compression
        vec3 RGB_c = sign(RGB_a) * 100.f / LIMIT_F_L * pow((27.13f * abs(RGB_a) / (400.f - abs(RGB_a))), vec3(1.f / 0.42f));

        // Step 6
        vec3 RGB = RGB_c / LIMIT_D_RGB;

        // Step 7
        vec3 XYZ = MATRIX_16_INV * RGB;

        vec3 luminanceRGB = LIMIT_XYZ_TO_RGB * XYZ;
        luminanceRGB = luminanceRGB / reference_luminance;

        outColor.rgb = luminanceRGB.rgb;
    }

    // Add Gamma 'monCurveRev' processing

    {
        vec4 breakPnt = vec4(0.00303993467, 0.00303993467, 0.00303993467, 1.);
        vec4 slope = vec4(12.9232101, 12.9232101, 12.9232101, 1.);
        vec4 scale = vec4(1.05499995, 1.05499995, 1.05499995, 1.00000095);
        vec4 offset = vec4(0.0549999997, 0.0549999997, 0.0549999997, 9.99999997e-07);
        vec4 gamma = vec4(0.416666657, 0.416666657, 0.416666657, 0.999998987);
        vec4 isAboveBreak = vec4(greaterThan( outColor, breakPnt));
        vec4 linSeg = outColor * slope;
        vec4 powSeg = pow( max( vec4(0., 0., 0., 0.), outColor ), gamma ) * scale - offset;
        vec4 res = isAboveBreak * powSeg + ( vec4(1., 1., 1., 1.) - isAboveBreak ) * linSeg;
        outColor.rgb = vec3(res.x, res.y, res.z);
        outColor.a = res.w;
    }

    // Add Range processing

    {
        outColor.rgb = max(vec3(0., 0., 0.), outColor.rgb);
    }

    }

    return outColor;
}
